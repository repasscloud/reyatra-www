networks:
  backend:
    name: backend
    driver: bridge
  frontend:
    name: frontend
    driver: bridge

services:
  mariadb:
    image: mariadb:lts-ubi9
    container_name: mariadb
    networks:
      - backend
    volumes:
      - "./data/mariadb:/var/lib/mysql"
      - "./conf/mariadb:/docker-entrypoint-initdb.d"
    restart: unless-stopped
    ports:
      - 3306
    env_file:
      - "./conf/mariadb.env"
    healthcheck:
      test: ["CMD", "pidof", "mysqld"]
      interval: 2m
      timeout: 10s
      retries: 3
      start_period: 30s

  wordpress:
    depends_on:
      - mariadb
    image: wordpress:php8.3-fpm-alpine
    container_name: wordpress
    restart: unless-stopped
    networks:
      - backend
    env_file:
      "./conf/wp-reyatra-au.env"
    volumes:
      - "./data/wordpress/rytr_prod:/var/www/html"
      - "./conf/wordpress/php.ini:/usr/local/etc/php/conf.d/custom.ini"
    healthcheck:
      test: ["CMD", "pidof", "php-fpm"]
      interval: 1m30s
      timeout: 30s
      retries: 3
      start_period: 30s

  nginx:
    depends_on:
      - wordpress
    image: nginx:1.27.1-alpine3.20
    container_name: nginx
    networks:
      - backend
      - frontend
    env_file:
      "./conf/nginx.env"
    volumes:
      # - "./conf/nginx/nginx.conf:/etc/nginx/nginx.conf"
      - "./conf/nginx/default.conf:/etc/nginx/conf.d/default.conf"
      - "./data/wordpress/rytr_prod:/var/www/html"
      - "./logs/nginx:/var/log/nginx"
    restart: unless-stopped
    ports:
      - "8080:80"
    healthcheck:
      test: ["CMD", "curl", "--silent", "--fail", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  caddy:
    depends_on:
      - nginx
    image: caddy:2.8.4-alpine
    container_name: caddy
    networks:
      - frontend
    volumes:
      - "./data/caddy2/data:/data/caddy"
      - "./data/caddy2/config:/config"
      - "./logs/caddy2:/var/log/caddy"
      - "./conf/caddy2/Caddyfile:/etc/caddy/Caddyfile"
    environment:
      - "TZ=Australia/Sydney"
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  adminer:
    depends_on:
      - mariadb
    image: adminer:4.8.1-standalone
    container_name: adminer
    restart: unless-stopped
    networks:
      - backend
      - frontend
    env_file:
      "./conf/adminer.env"
    ports:
      - "8081:8080"
    environment:
      - "MYSQL_ROOT_PASSWORD=2oM0d8QBMJYh"
      - "TZ=Australia/Sydney"
    healthcheck:
      test: ["CMD", "pidof", "php"]
      interval: 2m
      timeout: 10s
      retries: 3
      start_period: 30s
  # app:
  #   build:
  #     context: .
  #     target: final
    # If your application exposes a port, uncomment the following lines and change
    # the port numbers as needed. The first number is the host port and the second
    # is the port inside the container.
    # ports:
    #   - 8080:8080

    # The commented out section below is an example of how to define a PostgreSQL
    # database that your application can use. `depends_on` tells Docker Compose to
    # start the database before your application. The `db-data` volume persists the
    # database data between container restarts. The `db-password` secret is used
    # to set the database password. You must create `db/password.txt` and add
    # a password of your choosing to it before running `docker compose up`.
    #     depends_on:
    #       db:
    #         condition: service_healthy
    #   db:
    #     image: postgres
    #     restart: always
    #     user: postgres
    #     secrets:
    #       - db-password
    #     volumes:
    #       - db-data:/var/lib/postgresql/data
    #     environment:
    #       - POSTGRES_DB=example
    #       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    #     expose:
    #       - 5432
    #     healthcheck:
    #       test: [ "CMD", "pg_isready" ]
    #       interval: 10s
    #       timeout: 5s
    #       retries: 5
    # volumes:
    #   db-data:
    # secrets:
    #   db-password:
    #     file: db/password.txt
